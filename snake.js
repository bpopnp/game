// Generated by CoffeeScript 1.4.0
(function() {
  var Game, Snake, activate_point, clean_table, css, deactivate_point, digit_points, draw_number, draw_points, table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  css = '<style type="text/css">\n.point {\n    width: 4px;\n    height: 4px;\n    padding: 0;\n    margin: 0\n} \n.point-active {\n    background-color: red\n}\n</style>';

  document.write(css);

  document.write('<table id="game"></table>');

  table = {
    width: 50,
    height: 60
  };

  digit_points = [['***', '* *', '* *', '* *', '***'], ['  *', '  *', '  *', '  *', '  *'], ['***', '  *', ' *', '*', '***'], ['***', '  *', '***', '  *', '***'], ['* *', '* *', '***', '  *', '  *'], ['***', '  *', '***', '*', '***'], ['***', '*', '***', '* *', '***'], ['***', '  *', '  *', '  *', '  *'], ['***', '* *', '***', '* *', '***'], ['***', '* *', '***', '  *', '***']];

  activate_point = function(x, y) {
    return utils.get_td(x, y).addClass('point-active');
  };

  deactivate_point = function(x, y) {
    return utils.get_td(x, y).removeClass('point-active');
  };

  clean_table = function(x, y, width, height) {
    var i, j, _i, _ref, _results;
    _results = [];
    for (i = _i = x, _ref = x + width - 1; x <= _ref ? _i <= _ref : _i >= _ref; i = x <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (j = _j = y, _ref1 = y + height - 1; y <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = y <= _ref1 ? ++_j : --_j) {
          _results1.push(deactivate_point(i, j));
        }
        return _results1;
      })());
    }
    return _results;
  };

  draw_points = function(points, x, y) {
    var i, j, line, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      line = points[i];
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (j = _j = 0, _ref1 = line.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (line.charAt(j) === '*') {
            _results1.push(activate_point(j + x, i + y));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  draw_number = function(number) {
    var digits, i, x, y, _i, _ref, _results;
    digits = number.toString();
    _results = [];
    for (i = _i = 0, _ref = digits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      x = 2 + 4 * i;
      y = table.height - 7;
      _results.push(draw_points(digit_points[parseInt(digits.charAt(i))], x, y));
    }
    return _results;
  };

  Game = (function() {

    function Game() {
      this.main_loop = __bind(this.main_loop, this);

      this.onkeydown = __bind(this.onkeydown, this);

      this.start = __bind(this.start, this);

      this.draw = __bind(this.draw, this);
      this.snake = new Snake;
    }

    Game.prototype.draw = function() {
      var i, _i, _j, _ref, _ref1, _results;
      this.snake.draw();
      for (i = _i = 0, _ref = table.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        activate_point(i, 0);
        activate_point(i, table.height - 1);
        activate_point(i, table.height - 1 - 10);
      }
      _results = [];
      for (i = _j = 0, _ref1 = table.height - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        activate_point(0, i);
        _results.push(activate_point(table.width - 1, i));
      }
      return _results;
    };

    Game.prototype.start = function() {
      if (window.addEventListener) {
        window.addEventListener('keydown', this.onkeydown, false);
      } else if (document.attachEvent) {
        document.attachEvent('onkeydown', this.onkeydown);
      } else {
        document.addEventListener('keydown', this.onkeydown, false);
      }
      return this.main_loop();
    };

    Game.prototype.onkeydown = function(event) {
      var code, dir;
      code = event.charCode ? event.charCode : event.keyCode;
      dir = this.snake.direction;
      if (code === 'w'.charCodeAt(0) || code === 'W'.charCodeAt(0) || code === 38) {
        dir = 0;
      } else if (code === 'd'.charCodeAt(0) || code === 'D'.charCodeAt(0) || code === 39) {
        dir = 1;
      } else if (code === 's'.charCodeAt(0) || code === 'S'.charCodeAt(0) || code === 40) {
        dir = 2;
      } else if (code === 'a'.charCodeAt(0) || code === 'A'.charCodeAt(0) || code === 37) {
        dir = 3;
      }
      return this.snake.turn(dir);
    };

    Game.prototype.main_loop = function() {
      if (this.snake.go_ahead()) {
        return setTimeout(this.main_loop, 50 / this.snake.speed);
      } else {
        clean_table(1, 1, table.width - 2, table.height - 2 - 10);
        return draw_points(['****  **  *   * ****  **** * * **** *** ', '*    *  * ** ** *     *  * * * *    *  *', '*  * **** * * * ****  *  * * * **** *** ', '*  * *  * * * * *     *  * * * *    * * ', '**** *  * * * * ****  ****  *  **** *  *'], 4, 2);
      }
    };

    return Game;

  })();

  Snake = (function() {

    function Snake() {
      this.turn = __bind(this.turn, this);

      this.generate_food = __bind(this.generate_food, this);

      this.extend = __bind(this.extend, this);

      this.go_ahead = __bind(this.go_ahead, this);

      this.draw = __bind(this.draw, this);
      this.direction = 1;
      this.points = [1, 5, 2, 5, 3, 5, 4, 5];
      this.generate_food();
      this.has_turned = false;
      this.speed = 1.0;
      this.eaten = 0;
      draw_number(0);
    }

    Snake.prototype.draw = function() {
      var i, x, y, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.points.length / 2 - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        x = this.points[2 * i];
        y = this.points[2 * i + 1];
        _results.push(activate_point(x, y));
      }
      return _results;
    };

    Snake.prototype.go_ahead = function() {
      deactivate_point(this.points[0], this.points[1]);
      this.points = this.points.slice(2);
      activate_point(this.food.x, this.food.y);
      return this.extend();
    };

    Snake.prototype.extend = function() {
      var i, new_x, new_y, x, y, _i, _ref;
      this.has_turned = false;
      x = this.points[this.points.length - 2];
      y = this.points[this.points.length - 1];
      new_x = x;
      new_y = y;
      switch (this.direction) {
        case 0:
          new_x = x;
          new_y = y - 1;
          break;
        case 1:
          new_x = x + 1;
          new_y = y;
          break;
        case 2:
          new_x = x;
          new_y = y + 1;
          break;
        case 3:
          new_x = x - 1;
          new_y = y;
      }
      if (new_x >= table.width - 1 || new_x < 1 || new_y < 1 || new_y >= table.height - 10 - 1) {
        return false;
      }
      for (i = _i = 0, _ref = this.points.length / 2 - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (new_x === this.points[2 * i] && new_y === this.points[2 * i + 1]) {
          return false;
        }
      }
      this.points.push(new_x);
      this.points.push(new_y);
      activate_point(new_x, new_y);
      if (new_x === this.food.x && new_y === this.food.y) {
        this.extend();
        this.generate_food();
        this.speed *= 1.035;
        this.eaten += 1;
        clean_table(2, table.height - 7, 4 * this.eaten.toString().length - 1, 5);
        draw_number(this.eaten);
        switch (this.eaten) {
          case 10:
            utils.recover(1);
            break;
          case 12:
            utils.recover(2);
            break;
          case 14:
            utils.recover(3);
            break;
          case 16:
            utils.recover(4);
            break;
          case 18:
            utils.recover(5);
            break;
          case 20:
            utils.recover(6);
            break;
          case 25:
            utils.recover(7);
        }
      }
      return true;
    };

    Snake.prototype.generate_food = function() {
      return this.food = {
        x: Math.floor(Math.random() * (table.width - 4) + 2),
        y: Math.floor(Math.random() * (table.height - 4 - 10) + 2)
      };
    };

    Snake.prototype.turn = function(dir) {
      if (this.has_turned) {
        return;
      }
      if (this.direction % 2 && dir % 2) {
        return;
      } else if (!(this.direction % 2) && !(dir % 2)) {
        return;
      }
      this.has_turned = true;
      return this.direction = dir;
    };

    return Snake;

  })();

  $(function() {
    var game;
    utils.set_style();
    utils.make_table(table.width, table.height, 'point');
    game = new Game;
    game.draw();
    return game.start();
  });

}).call(this);
